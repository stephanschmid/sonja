@import 'compass/utilities/sprites';         // Include compass sprite helpers
@import 'compass/css3/background-size';      // Include helper to calc background size


//
// // * DO NOT USE THIS MIXIN ANYMORE:
// // * THAT IS WHY IT IS COMMENTED OUT.
// // * USE retina-icon IF YOU REALLY MUST.
// // * BETTER USE .ico-.... CLASSES. SEE THE ico MODULE.
//
// @mixin retina-sprite($name, $hover: false, $active: false) {
//     @include _retina-sprite($name, $sprites, $sprites2x, $hover, $active);
// }
//
// // The general purpose retina sprite mixin.
//     //
//     //    @include retina-sprite(name, $spritemap1, $spritemap2)
//     //    @include retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $pad: 0])
//     //
//     //    If `dimensions` is true, then width/height will also be set.
//     //
//     //    if `pad` is non-zero, then that's how much padding the element will have (requires
//     //    $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
//     //
// @mixin _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions: true, $pad: 0) {
//     background-position: sprite-position($sprites, $name, -$pad, -$pad);
//
//     @if $hover == true {
//         $name_hover: $name + -hover;
//         &:hover, &:focus {
//             background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
//         }
//     }
//     @if $active == true {
//         $name_active: $name + -active;
//         &:active {
//             background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
//         }
//     }
//
//     @if $pad > 0 {
//         padding: $pad;
//     }
//
//     @include retina {
//         & {
//             $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2);
//             background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
//             //  sprite-path() returns the path of the generated sprite sheet, which
//             //  image-width() calculates the width of. the ceil() is in place in case
//             //  you have sprites that have an odd-number of pixels in width
//
//             @if $hover == true {
//                 $name_hover: $name + -hover;    // create myButton_hover and assign it
//                 &:hover{
//                     $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
//                     background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
//                 }
//             }
//             @if $active == true {
//                 $name_active: $name + -active;    // create myButton_active and assign it
//                 &:active{
//                     $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
//                     background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
//                 }
//             }
//         }
//     }
// }

@mixin retina-graphic($path, $path2x) {
    $width: image-width($path);
    $height: image-height($path);
    background-image: image-url($path);
    background-repeat: no-repeat;
    background-size: $width $height;

    @include retina {
        background-image: image-url($path2x);
    }
}

@mixin retina-graphic-block($path, $path2x) {
    width: image-width($path);
    height: image-height($path);
    @include retina-graphic($path, $path2x);
}

@mixin retina-image($shortpath, $extension: 'png') {
    $path: $shortpath + '.' + $extension;
    $path2x: $shortpath + '-2x.' + $extension;
    @include retina-graphic($path, $path2x);
}

@mixin retina-image-block($shortpath, $extension: 'png') {
    $path: $shortpath + '.' + $extension;
    width: image-width($path);
    height: image-height($path);
    @include retina-image($shortpath, $extension);
}
